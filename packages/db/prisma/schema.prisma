// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../dist"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Country {
  GEORGIA
  CYPRUS
  GREECE
  LEBANON
}

enum PropertyStatus {
  OFF_PLAN
  NEW_BUILD
  RESALE
}

enum InvestmentGoal {
  HIGH_ROI
  CAPITAL_GROWTH
  GOLDEN_VISA
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  password        String?  // Hashed password for JWT auth (optional for OAuth users)
  firstName       String?
  lastName        String?
  phone           String?
  country         String?
  role            Role     @default(USER)
  investmentGoals InvestmentGoal[]

  // OAuth provider data
  googleId        String?  @unique
  provider        String?  // 'local' or 'google'
  avatar          String?  // Profile picture URL

  // Account status
  isActive        Boolean  @default(true)
  emailVerifiedAt DateTime?
  lastLoginAt     DateTime?
  
  // Ban management
  bannedAt        DateTime?
  bannedBy        String?
  bannedReason    String?
  
  // Admin invitation tracking
  invitedBy       String?  // ID of admin who invited this user
  invitationAcceptedAt DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  favoriteProperties FavoriteProperty[]
  propertyInquiries  PropertyInquiry[]
  ownedProperties    UserOwnedProperty[]
  auditLogs         AdminAuditLog[] @relation("AdminAuditLogs")
  bannedUsers       User[] @relation("BannedByAdmin")
  bannedByAdmin     User? @relation("BannedByAdmin", fields: [bannedBy], references: [id])
  invitedUsers      User[] @relation("InvitedByAdmin")
  invitedByAdmin    User? @relation("InvitedByAdmin", fields: [invitedBy], references: [id])

  @@index([role])
  @@index([isActive])
  @@index([email])
  @@map("users")
}

model Developer {
  id          String   @id @default(cuid())
  name        String
  description String?
  website     String?
  logo        String?
  country     Country
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  properties Property[]

  @@map("developers")
}

model LocationGuide {
  id          String   @id @default(cuid())
  title       String
  content     String
  country     Country
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  properties Property[]

  @@map("location_guides")
}

model Property {
  id              String         @id @default(cuid())
  title           String
  description     String
  price           Float
  currency        String         @default("USD")
  bedrooms        Int
  bathrooms       Int
  area            Float
  country         Country
  status          PropertyStatus
  isGoldenVisaEligible Boolean   @default(false)
  images          String[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Foreign Keys
  developerId     String?
  locationGuideId String?

  // Relations
  developer           Developer?           @relation(fields: [developerId], references: [id])
  locationGuide       LocationGuide?       @relation(fields: [locationGuideId], references: [id])
  investmentData      PropertyInvestmentData?
  favoriteProperties  FavoriteProperty[]
  propertyInquiries   PropertyInquiry[]
  ownedByUsers        UserOwnedProperty[]

  @@map("properties")
}

model PropertyInvestmentData {
  id                    String  @id @default(cuid())
  propertyId            String  @unique
  expectedROI           Float?
  rentalYield           Float?
  capitalGrowth         Float?
  isGoldenVisaEligible  Boolean @default(false)
  minInvestment         Float?
  maxInvestment         Float?
  paymentPlan           String?
  completionDate        DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("property_investment_data")
}

model FavoriteProperty {
  id        String   @id @default(cuid())
  userId    String
  propertyId String
  createdAt DateTime @default(now())

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
  @@map("favorite_properties")
}

model PropertyInquiry {
  id        String   @id @default(cuid())
  userId    String?
  propertyId String
  name      String
  email     String
  phone     String?
  message   String?
  createdAt DateTime @default(now())

  // Relations
  user     User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  property Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("property_inquiries")
}

model UserOwnedProperty {
  id              String    @id @default(cuid())
  userId          String
  propertyId      String?
  customName      String
  purchasePrice   Float
  purchaseDate    DateTime
  initialMortgage Float?
  currentRent     Float?
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Property? @relation(fields: [propertyId], references: [id], onDelete: SetNull)

  @@map("user_owned_properties")
}

model AdminAuditLog {
  id          String   @id @default(cuid())
  adminId     String
  action      String   // 'CREATE_USER', 'BAN_USER', 'UNBAN_USER', 'UPDATE_ROLE', 'DELETE_PROPERTY', etc.
  targetType  String?  // 'user', 'property', 'admin', etc.
  targetId    String?
  details     Json?    // Additional details about the action
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  // Relations
  admin User @relation("AdminAuditLogs", fields: [adminId], references: [id])

  @@index([adminId])
  @@index([createdAt])
  @@index([action])
  @@map("admin_audit_logs")
}