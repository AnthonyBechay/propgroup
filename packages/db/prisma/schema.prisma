// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Country {
  GEORGIA
  CYPRUS
  GREECE
  LEBANON
}

enum PropertyStatus {
  OFF_PLAN
  NEW_BUILD
  RESALE
}

enum PropertyAvailabilityStatus {
  AVAILABLE
  RESERVED
  SOLD
  OFF_MARKET
}

enum PropertyVisibility {
  PUBLIC // Visible to all users
  ELITE_ONLY // Visible only to elite members
  HIDDEN // Hidden from all users (admin only)
}

enum MembershipTier {
  FREE
  ELITE
  PREMIUM
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum ReservationStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
  CANCELLED
}

enum PropertyType {
  APARTMENT
  VILLA
  TOWNHOUSE
  PENTHOUSE
  STUDIO
  DUPLEX
  LAND
  COMMERCIAL
  OFFICE
}

enum FurnishingStatus {
  UNFURNISHED
  SEMI_FURNISHED
  FULLY_FURNISHED
}

enum OwnershipType {
  FREEHOLD
  LEASEHOLD
}

enum DocumentType {
  FLOOR_PLAN
  BROCHURE
  CONTRACT
  LEGAL_DOCUMENT
  CERTIFICATE
  OTHER
}

enum InvestmentGoal {
  HIGH_ROI
  CAPITAL_GROWTH
  GOLDEN_VISA
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
  AGENT // Real estate agent/broker
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
  COUNTERED
  WITHDRAWN
  EXPIRED
}

enum TourStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum TourType {
  IN_PERSON
  VIRTUAL
  VIDEO_CALL
}

enum TransactionStatus {
  INITIATED
  DOCUMENTS_PENDING
  UNDER_REVIEW
  APPROVED
  PAYMENT_PENDING
  PAYMENT_COMPLETED
  COMPLETED
  CANCELLED
}

enum NotificationType {
  PROPERTY_UPDATE
  PRICE_DROP
  NEW_MATCHING_PROPERTY
  RESERVATION_UPDATE
  OFFER_UPDATE
  TOUR_REMINDER
  MEMBERSHIP_EXPIRING
  DOCUMENT_UPLOADED
  MESSAGE_RECEIVED
  SYSTEM_ANNOUNCEMENT
}

enum MaintenanceRequestStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum MaintenanceRequestPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum ReviewStatus {
  PENDING_MODERATION
  APPROVED
  REJECTED
  FLAGGED
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  password        String? // Hashed password for JWT auth (optional for OAuth users)
  firstName       String?
  lastName        String?
  phone           String?
  country         String?
  role            Role             @default(USER)
  investmentGoals InvestmentGoal[]

  // OAuth provider data
  googleId String? @unique
  provider String? // 'local' or 'google'
  avatar   String? // Profile picture URL

  // Membership & Subscription
  membershipTier      MembershipTier @default(FREE)
  membershipStartDate DateTime?
  membershipEndDate   DateTime?

  // Account status
  isActive        Boolean   @default(true)
  emailVerifiedAt DateTime?
  lastLoginAt     DateTime?

  // Ban management
  bannedAt     DateTime?
  bannedBy     String?
  bannedReason String?

  // Admin invitation tracking
  invitedBy            String? // ID of admin who invited this user
  invitationAcceptedAt DateTime?

  // User Preferences
  preferredLanguage    String? @default("en")
  preferredCurrency    String? @default("USD")
  timezone             String?
  notificationsEnabled Boolean @default(true)
  emailNotifications   Boolean @default(true)
  smsNotifications     Boolean @default(false)

  // Agent specific fields
  agentLicenseNumber  String?
  agentCompany        String?
  agentBio            String?
  agentCommissionRate Float?

  // Referral
  referralCode String? @unique
  referredBy   String? // User ID who referred this user

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  favoriteProperties   FavoriteProperty[]
  propertyInquiries    PropertyInquiry[]
  ownedProperties      UserOwnedProperty[]
  subscriptions        Subscription[]
  propertyReservations PropertyReservation[]
  propertyOffers       PropertyOffer[]
  propertyTours        PropertyTour[]
  propertyComparisons  PropertyComparison[]
  notifications        Notification[]
  propertyReviews      PropertyReview[]
  maintenanceRequests  MaintenanceRequest[]
  transactions         Transaction[]
  messages             Message[]             @relation("UserMessages")
  sentMessages         Message[]             @relation("SentMessages")
  referredUsers        User[]                @relation("UserReferrals")
  referrer             User?                 @relation("UserReferrals", fields: [referredBy], references: [id])
  auditLogs            AdminAuditLog[]       @relation("AdminAuditLogs")
  bannedUsers          User[]                @relation("BannedByAdmin")
  bannedByAdmin        User?                 @relation("BannedByAdmin", fields: [bannedBy], references: [id])
  invitedUsers         User[]                @relation("InvitedByAdmin")
  invitedByAdmin       User?                 @relation("InvitedByAdmin", fields: [invitedBy], references: [id])

  // Agent relations
  managedProperties Property[] @relation("PropertyAgent")

  @@index([role])
  @@index([isActive])
  @@index([email])
  @@index([membershipTier])
  @@index([referralCode])
  @@map("users")
}

model Developer {
  id          String   @id @default(cuid())
  name        String
  description String?
  website     String?
  logo        String?
  country     Country
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  properties Property[]

  @@map("developers")
}

model LocationGuide {
  id        String   @id @default(cuid())
  title     String
  content   String
  country   Country
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  properties Property[]

  @@map("location_guides")
}

model Property {
  id               String  @id @default(cuid())
  title            String
  description      String
  shortDescription String? // For listing previews
  price            Float
  currency         String  @default("USD")

  // Basic Property Details
  propertyType  PropertyType
  bedrooms      Int
  bathrooms     Int
  area          Float // in square meters
  builtYear     Int?
  floors        Int?
  floor         Int? // Which floor (for apartments)
  parkingSpaces Int?         @default(0)

  // Location Details
  country   Country
  city      String?
  district  String?
  address   String?
  zipCode   String?
  latitude  Float?
  longitude Float?

  // Property Status & Visibility
  status             PropertyStatus
  availabilityStatus PropertyAvailabilityStatus @default(AVAILABLE)
  visibility         PropertyVisibility         @default(PUBLIC)

  // Features & Amenities
  furnishingStatus     FurnishingStatus?
  ownershipType        OwnershipType?
  isGoldenVisaEligible Boolean           @default(false)
  hasPool              Boolean           @default(false)
  hasGym               Boolean           @default(false)
  hasGarden            Boolean           @default(false)
  hasBalcony           Boolean           @default(false)
  hasSecurity          Boolean           @default(false)
  hasElevator          Boolean           @default(false)
  hasCentralAC         Boolean           @default(false)

  // Media
  images         String[] // Main property images
  videoUrl       String? // Property video/virtual tour
  virtualTourUrl String? // 360 tour link

  // SEO & Marketing
  slug            String?   @unique
  metaTitle       String?
  metaDescription String?
  featured        Boolean   @default(false)
  featuredUntil   DateTime?
  views           Int       @default(0)

  // Availability Management
  availableFrom DateTime?
  reservedUntil DateTime?
  soldAt        DateTime?

  // Investment Highlights
  highlightedFeatures String[] // e.g., ["Beach Front", "High ROI", "Payment Plan"]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?

  // Foreign Keys
  developerId     String?
  locationGuideId String?
  agentId         String? // Assigned real estate agent

  // Relations
  developer          Developer?              @relation(fields: [developerId], references: [id])
  locationGuide      LocationGuide?          @relation(fields: [locationGuideId], references: [id])
  agent              User?                   @relation("PropertyAgent", fields: [agentId], references: [id])
  investmentData     PropertyInvestmentData?
  favoriteProperties FavoriteProperty[]
  propertyInquiries  PropertyInquiry[]
  ownedByUsers       UserOwnedProperty[]
  reservations       PropertyReservation[]
  documents          PropertyDocument[]
  amenities          PropertyAmenity[]
  tags               PropertyTag[]
  offers             PropertyOffer[]
  tours              PropertyTour[]
  reviews            PropertyReview[]
  updates            PropertyUpdate[]
  transactions       Transaction[]

  @@index([country])
  @@index([propertyType])
  @@index([status])
  @@index([availabilityStatus])
  @@index([visibility])
  @@index([featured])
  @@index([price])
  @@index([slug])
  @@index([agentId])
  @@index([createdAt])
  @@map("properties")
}

model PropertyInvestmentData {
  id         String @id @default(cuid())
  propertyId String @unique

  // ROI & Returns
  expectedROI        Float? // Percentage
  rentalYield        Float? // Percentage
  capitalGrowth      Float? // Percentage
  annualAppreciation Float? // Percentage

  // Investment Details
  minInvestment         Float?
  maxInvestment         Float?
  downPaymentPercentage Float?
  paymentPlan           String?
  installmentYears      Int?

  // Golden Visa
  isGoldenVisaEligible Boolean @default(false)
  goldenVisaMinAmount  Float?

  // Dates & Deadlines
  completionDate      DateTime?
  handoverDate        DateTime?
  expectedRentalStart DateTime?

  // Market Analysis
  averageRentPerMonth         Float?
  propertyAppreciationHistory Float[] // Historical appreciation percentages
  comparableProperties        String[] // IDs of similar properties

  // Additional Investment Info
  mortgageAvailable Boolean @default(false)
  serviceFee        Float? // Annual service/maintenance fee
  propertyTax       Float? // Annual property tax

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("property_investment_data")
}

model FavoriteProperty {
  id         String   @id @default(cuid())
  userId     String
  propertyId String
  createdAt  DateTime @default(now())

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
  @@map("favorite_properties")
}

model PropertyInquiry {
  id         String   @id @default(cuid())
  userId     String?
  propertyId String
  name       String
  email      String
  phone      String?
  message    String?
  createdAt  DateTime @default(now())

  // Relations
  user     User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("property_inquiries")
}

model UserOwnedProperty {
  id              String   @id @default(cuid())
  userId          String
  propertyId      String?
  customName      String
  purchasePrice   Float
  purchaseDate    DateTime
  initialMortgage Float?
  currentRent     Float?
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Property? @relation(fields: [propertyId], references: [id], onDelete: SetNull)

  @@map("user_owned_properties")
}

model AdminAuditLog {
  id         String   @id @default(cuid())
  adminId    String
  action     String // 'CREATE_USER', 'BAN_USER', 'UNBAN_USER', 'UPDATE_ROLE', 'DELETE_PROPERTY', etc.
  targetType String? // 'user', 'property', 'admin', etc.
  targetId   String?
  details    Json? // Additional details about the action
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  // Relations
  admin User @relation("AdminAuditLogs", fields: [adminId], references: [id])

  @@index([adminId])
  @@index([createdAt])
  @@index([action])
  @@map("admin_audit_logs")
}

// ============================================
// SUBSCRIPTION & MEMBERSHIP SYSTEM
// ============================================

model Subscription {
  id             String         @id @default(cuid())
  userId         String
  membershipTier MembershipTier

  // Pricing
  amount   Float
  currency String @default("USD")

  // Period
  startDate DateTime
  endDate   DateTime
  autoRenew Boolean  @default(true)

  // Status
  status PaymentStatus @default(PENDING)

  // Payment Gateway Info
  paymentGateway String? // 'stripe', 'paypal', etc.
  transactionId  String?
  paymentMethod  String? // 'card', 'bank_transfer', etc.

  // Metadata
  cancelledAt  DateTime?
  cancelReason String?
  refundedAt   DateTime?
  refundAmount Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([endDate])
  @@map("subscriptions")
}

// ============================================
// PROPERTY RESERVATION SYSTEM
// ============================================

model PropertyReservation {
  id         String @id @default(cuid())
  propertyId String
  userId     String

  // Reservation Details
  status          ReservationStatus @default(PENDING)
  reservationDate DateTime          @default(now())
  expiryDate      DateTime

  // Financial
  reservationFee Float? // Deposit/reservation fee
  currency       String        @default("USD")
  paymentStatus  PaymentStatus @default(PENDING)
  transactionId  String?

  // Admin Actions
  approvedAt      DateTime?
  approvedBy      String? // Admin user ID
  rejectedAt      DateTime?
  rejectedBy      String? // Admin user ID
  rejectionReason String?

  // User Actions
  cancelledAt  DateTime?
  cancelReason String?

  // Notes & Communication
  userNotes  String? // User's message/notes
  adminNotes String? // Internal admin notes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([propertyId])
  @@index([userId])
  @@index([status])
  @@index([expiryDate])
  @@map("property_reservations")
}

// ============================================
// PROPERTY AMENITIES
// ============================================

model PropertyAmenity {
  id          String  @id @default(cuid())
  propertyId  String
  name        String // e.g., "Swimming Pool", "Gym", "Concierge"
  category    String? // e.g., "Recreation", "Security", "Utilities"
  description String?
  icon        String? // Icon name or URL

  createdAt DateTime @default(now())

  // Relations
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId])
  @@map("property_amenities")
}

// ============================================
// PROPERTY DOCUMENTS
// ============================================

model PropertyDocument {
  id         String @id @default(cuid())
  propertyId String

  // Document Info
  title       String
  description String?
  type        DocumentType
  fileUrl     String
  fileSize    Int? // in bytes
  mimeType    String?

  // Access Control
  isPublic Boolean @default(false) // If false, only elite/admin can view

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId])
  @@index([type])
  @@map("property_documents")
}

// ============================================
// MEMBERSHIP BENEFITS TRACKING
// ============================================

model MembershipBenefit {
  id          String         @id @default(cuid())
  tier        MembershipTier
  name        String
  description String
  icon        String?
  sortOrder   Int            @default(0)
  isActive    Boolean        @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tier])
  @@index([isActive])
  @@map("membership_benefits")
}

// ============================================
// PROPERTY VIEWS TRACKING
// ============================================

model PropertyView {
  id         String   @id @default(cuid())
  propertyId String
  userId     String? // Null if anonymous
  ipAddress  String?
  userAgent  String?
  referrer   String?
  viewedAt   DateTime @default(now())

  @@index([propertyId])
  @@index([userId])
  @@index([viewedAt])
  @@map("property_views")
}

// ============================================
// SAVED SEARCHES
// ============================================

model SavedSearch {
  id     String @id @default(cuid())
  userId String
  name   String

  // Search Criteria (stored as JSON)
  criteria Json

  // Notifications
  emailAlerts Boolean @default(false)
  frequency   String? // 'instant', 'daily', 'weekly'

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("saved_searches")
}

// ============================================
// PROPERTY PRICE HISTORY
// ============================================

model PropertyPriceHistory {
  id         String   @id @default(cuid())
  propertyId String
  price      Float
  currency   String   @default("USD")
  changedAt  DateTime @default(now())
  changedBy  String? // Admin user ID
  reason     String? // Reason for price change

  @@index([propertyId])
  @@index([changedAt])
  @@map("property_price_history")
}

// ============================================
// CONTACT REQUESTS / LEADS
// ============================================

model ContactRequest {
  id String @id @default(cuid())

  // Contact Info
  name    String
  email   String
  phone   String?
  company String?

  // Request Details
  subject String
  message String

  // Context
  relatedPropertyId String?
  source            String? // 'contact_form', 'property_inquiry', 'chat', etc.

  // Status
  isRead     Boolean @default(false)
  isReplied  Boolean @default(false)
  assignedTo String? // Admin user ID

  // Metadata
  ipAddress String?
  userAgent String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([isRead])
  @@index([createdAt])
  @@map("contact_requests")
}

// ============================================
// NEWSLETTER SUBSCRIPTIONS
// ============================================

model NewsletterSubscription {
  id        String  @id @default(cuid())
  email     String  @unique
  firstName String?
  lastName  String?

  // Preferences
  isActive    Boolean @default(true)
  preferences Json? // e.g., {"topics": ["investment", "market_updates"]}

  // Metadata
  subscribedAt      DateTime  @default(now())
  unsubscribedAt    DateTime?
  unsubscribeReason String?
  source            String? // Where they subscribed from

  @@index([isActive])
  @@map("newsletter_subscriptions")
}

// ============================================
// INVESTMENT PORTFOLIO ANALYTICS
// ============================================

model UserPortfolioAnalytics {
  id     String @id @default(cuid())
  userId String @unique

  // Portfolio Metrics
  totalInvestment   Float @default(0)
  currentValue      Float @default(0)
  totalROI          Float @default(0)
  totalRentalIncome Float @default(0)

  // Performance
  averageROI              Float?
  bestPerformingProperty  String?
  worstPerformingProperty String?

  lastCalculatedAt DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("user_portfolio_analytics")
}

// ============================================
// PROPERTY TAGS SYSTEM
// ============================================

model Tag {
  id          String  @id @default(cuid())
  name        String  @unique
  slug        String  @unique
  description String?
  color       String? // Hex color for UI
  icon        String?

  // Categorization
  category String? // e.g., "feature", "location", "investment_type"

  // Display
  isActive  Boolean @default(true)
  sortOrder Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  properties PropertyTag[]

  @@index([category])
  @@index([isActive])
  @@map("tags")
}

model PropertyTag {
  id         String   @id @default(cuid())
  propertyId String
  tagId      String
  createdAt  DateTime @default(now())

  // Relations
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  tag      Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([propertyId, tagId])
  @@index([propertyId])
  @@index([tagId])
  @@map("property_tags")
}

// ============================================
// PROPERTY OFFERS/BIDDING SYSTEM
// ============================================

model PropertyOffer {
  id         String @id @default(cuid())
  propertyId String
  userId     String

  // Offer Details
  offerAmount Float
  currency    String      @default("USD")
  status      OfferStatus @default(PENDING)

  // Terms
  downPayment         Float?
  financingType       String? // 'cash', 'mortgage', 'installment'
  proposedClosingDate DateTime?
  contingencies       String? // Special conditions

  // Counter Offer
  counterAmount Float?
  counterTerms  String?

  // Validity
  expiresAt DateTime

  // Communication
  message    String?
  adminNotes String?

  // Actions
  acceptedAt      DateTime?
  rejectedAt      DateTime?
  withdrawnAt     DateTime?
  rejectionReason String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([propertyId])
  @@index([userId])
  @@index([status])
  @@index([expiresAt])
  @@map("property_offers")
}

// ============================================
// PROPERTY TOURS/VIEWINGS
// ============================================

model PropertyTour {
  id         String @id @default(cuid())
  propertyId String
  userId     String

  // Tour Details
  tourType      TourType
  status        TourStatus @default(SCHEDULED)
  scheduledDate DateTime
  duration      Int? // Duration in minutes

  // Contact
  attendeesCount  Int     @default(1)
  contactPhone    String?
  specialRequests String?

  // Virtual Tour
  meetingLink     String? // Zoom, Google Meet link
  meetingId       String?
  meetingPassword String?

  // Confirmation
  confirmedAt DateTime?
  confirmedBy String? // Admin/Agent user ID

  // Completion
  completedAt        DateTime?
  noShowAt           DateTime?
  cancelledAt        DateTime?
  cancellationReason String?

  // Feedback
  attendeeFeedback String?
  agentNotes       String?

  // Reminders
  reminderSent   Boolean   @default(false)
  reminderSentAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([propertyId])
  @@index([userId])
  @@index([status])
  @@index([scheduledDate])
  @@map("property_tours")
}

// ============================================
// PROPERTY COMPARISON
// ============================================

model PropertyComparison {
  id     String  @id @default(cuid())
  userId String
  name   String? // User can name the comparison

  // Properties being compared (stored as array of IDs)
  propertyIds String[]

  // Metadata
  notes      String?
  isPublic   Boolean @default(false) // Can user share this comparison?
  shareToken String? @unique // Token for sharing

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([shareToken])
  @@map("property_comparisons")
}

// ============================================
// PROPERTY REVIEWS & RATINGS
// ============================================

model PropertyReview {
  id         String @id @default(cuid())
  propertyId String
  userId     String

  // Review Content
  rating Int // 1-5 stars
  title  String?
  review String

  // Detailed Ratings
  locationRating  Int? // 1-5
  valueRating     Int? // 1-5
  qualityRating   Int? // 1-5
  amenitiesRating Int? // 1-5

  // Verification
  isVerifiedPurchase Boolean @default(false)

  // Status
  status ReviewStatus @default(PENDING_MODERATION)

  // Moderation
  moderatedAt     DateTime?
  moderatedBy     String? // Admin user ID
  moderationNotes String?

  // Engagement
  helpfulCount Int @default(0)
  reportCount  Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([propertyId, userId]) // One review per user per property
  @@index([propertyId])
  @@index([userId])
  @@index([status])
  @@index([rating])
  @@map("property_reviews")
}

// ============================================
// PROPERTY UPDATES/NEWS
// ============================================

model PropertyUpdate {
  id         String @id @default(cuid())
  propertyId String

  // Update Content
  title      String
  content    String
  updateType String // 'price_change', 'construction_progress', 'news', 'document_added'

  // Media
  images String[]

  // Notifications
  notifySubscribers Boolean @default(false)

  // Author
  createdBy String // Admin/Agent user ID

  createdAt DateTime @default(now())

  // Relations
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId])
  @@index([createdAt])
  @@map("property_updates")
}

// ============================================
// TRANSACTION MANAGEMENT
// ============================================

model Transaction {
  id         String  @id @default(cuid())
  propertyId String
  buyerId    String
  sellerId   String? // If applicable

  // Transaction Details
  status          TransactionStatus @default(INITIATED)
  transactionType String // 'purchase', 'rental', 'lease'

  // Financial
  agreedPrice     Float
  currency        String @default("USD")
  downPayment     Float?
  remainingAmount Float?

  // Payment Schedule
  paymentSchedule Json? // Array of payment milestones

  // Important Dates
  initiatedAt         DateTime  @default(now())
  contractSignedAt    DateTime?
  depositPaidAt       DateTime?
  finalPaymentAt      DateTime?
  completedAt         DateTime?
  expectedClosingDate DateTime?
  actualClosingDate   DateTime?

  // Legal
  contractUrl         String?
  legalRepresentative String?
  notaryDetails       String?

  // Status Updates
  documentsComplete  Boolean @default(false)
  inspectionComplete Boolean @default(false)
  fundingApproved    Boolean @default(false)
  titleTransferred   Boolean @default(false)

  // Notes
  notes         String?
  internalNotes String? // Admin only

  // Cancellation
  cancelledAt        DateTime?
  cancellationReason String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  buyer    User     @relation(fields: [buyerId], references: [id], onDelete: Cascade)

  @@index([propertyId])
  @@index([buyerId])
  @@index([status])
  @@index([expectedClosingDate])
  @@map("transactions")
}

// ============================================
// NOTIFICATIONS SYSTEM
// ============================================

model Notification {
  id     String @id @default(cuid())
  userId String

  // Notification Content
  type    NotificationType
  title   String
  message String

  // Links & Actions
  link        String? // URL to navigate to
  actionLabel String? // e.g., "View Property"
  actionUrl   String?

  // Related Entity
  relatedEntityType String? // 'property', 'reservation', 'offer', etc.
  relatedEntityId   String?

  // Status
  isRead Boolean   @default(false)
  readAt DateTime?

  // Priority
  priority String @default("normal") // 'low', 'normal', 'high', 'urgent'

  // Expiry
  expiresAt DateTime?

  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@index([type])
  @@map("notifications")
}

// ============================================
// MESSAGING SYSTEM
// ============================================

model Message {
  id String @id @default(cuid())

  // Participants
  senderId    String
  recipientId String

  // Content
  subject String?
  body    String

  // Context
  propertyId String? // If message is about a property

  // Attachments
  attachments String[]

  // Status
  isRead Boolean   @default(false)
  readAt DateTime?

  // Threading
  parentMessageId String? // For replies
  threadId        String? // Conversation thread

  createdAt DateTime @default(now())

  // Relations
  sender    User @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  recipient User @relation("UserMessages", fields: [recipientId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([recipientId])
  @@index([threadId])
  @@index([propertyId])
  @@index([createdAt])
  @@map("messages")
}

// ============================================
// MAINTENANCE REQUESTS (for sold properties)
// ============================================

model MaintenanceRequest {
  id         String @id @default(cuid())
  propertyId String
  userId     String // Property owner

  // Request Details
  title       String
  description String
  category    String // 'plumbing', 'electrical', 'hvac', 'general', etc.
  priority    MaintenanceRequestPriority @default(MEDIUM)
  status      MaintenanceRequestStatus   @default(OPEN)

  // Location within property
  location String? // e.g., "Kitchen", "Master Bedroom"

  // Media
  images String[]

  // Assignment
  assignedTo String? // Maintenance staff/contractor

  // Scheduling
  scheduledDate DateTime?
  completedDate DateTime?

  // Cost
  estimatedCost Float?
  actualCost    Float?

  // Resolution
  resolutionNotes String?

  // Feedback
  userRating   Int? // 1-5
  userFeedback String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([propertyId])
  @@index([status])
  @@index([priority])
  @@map("maintenance_requests")
}

// ============================================
// MARKETING CAMPAIGNS
// ============================================

model MarketingCampaign {
  id   String @id @default(cuid())
  name String

  // Campaign Details
  description  String?
  campaignType String // 'email', 'sms', 'push', 'banner'

  // Status
  status CampaignStatus @default(DRAFT)

  // Targeting
  targetAudience       Json? // Filters for user segments
  targetProperties     String[] // Specific property IDs
  targetMembershipTier MembershipTier?

  // Content
  subject  String?
  body     String
  imageUrl String?
  ctaText  String? // Call-to-action text
  ctaUrl   String?

  // Scheduling
  scheduledAt DateTime?
  startDate   DateTime?
  endDate     DateTime?

  // Analytics
  sentCount       Int @default(0)
  openCount       Int @default(0)
  clickCount      Int @default(0)
  conversionCount Int @default(0)

  // Budget
  budget Float?
  spent  Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String // Admin user ID

  @@index([status])
  @@index([scheduledAt])
  @@map("marketing_campaigns")
}

// ============================================
// REFERRAL PROGRAM
// ============================================

model Referral {
  id String @id @default(cuid())

  // Referrer & Referee
  referrerId String
  refereeId  String

  // Referral Details
  referralCode String

  // Status
  status      String    @default("pending") // 'pending', 'completed', 'rewarded'
  completedAt DateTime?

  // Rewards
  referrerRewardType     String? // 'discount', 'cash', 'membership_upgrade'
  referrerRewardAmount   Float?
  referrerRewardCurrency String?   @default("USD")
  referrerRewarded       Boolean   @default(false)
  referrerRewardedAt     DateTime?

  refereeRewardType     String?
  refereeRewardAmount   Float?
  refereeRewardCurrency String?   @default("USD")
  refereeRewarded       Boolean   @default(false)
  refereeRewardedAt     DateTime?

  // Context
  conversionType String? // 'signup', 'subscription', 'property_purchase'
  propertyId     String? // If referral led to property purchase

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([referrerId])
  @@index([refereeId])
  @@index([referralCode])
  @@index([status])
  @@map("referrals")
}

// ============================================
// CURRENCY EXCHANGE RATES (for multi-currency)
// ============================================

model ExchangeRate {
  id String @id @default(cuid())

  baseCurrency   String // e.g., "USD"
  targetCurrency String // e.g., "EUR"
  rate           Float

  // Source
  source String? // API source

  // Validity
  validFrom  DateTime  @default(now())
  validUntil DateTime?

  createdAt DateTime @default(now())

  @@unique([baseCurrency, targetCurrency, validFrom])
  @@index([baseCurrency, targetCurrency])
  @@map("exchange_rates")
}

// ============================================
// LEGAL COMPLIANCE & DOCUMENTS
// ============================================

model LegalCompliance {
  id         String @id @default(cuid())
  propertyId String

  // Compliance Details
  complianceType String // 'golden_visa', 'tax_clearance', 'building_permit', etc.
  status         String @default("pending") // 'pending', 'approved', 'rejected', 'expired'

  // Documents
  documentUrl      String?
  documentNumber   String?
  issuingAuthority String?

  // Dates
  issuedDate   DateTime?
  expiryDate   DateTime?
  verifiedDate DateTime?

  // Verification
  verifiedBy        String? // Admin user ID
  verificationNotes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([propertyId])
  @@index([status])
  @@index([expiryDate])
  @@map("legal_compliance")
}

// ============================================
// SYSTEM SETTINGS & CONFIGURATION
// ============================================

model SystemSetting {
  id    String @id @default(cuid())
  key   String @unique
  value Json

  // Metadata
  description String?
  category    String? // 'payment', 'notification', 'feature_flag', etc.
  isPublic    Boolean @default(false) // Can clients access this?

  updatedAt DateTime @updatedAt
  updatedBy String? // Admin user ID

  @@index([category])
  @@map("system_settings")
}
